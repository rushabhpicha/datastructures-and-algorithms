class Solution {
    int min = 1;
    public int minCut(String s) {
        if(s == null || s.length() == 0) return 0;
        if(checkPalindrome(s, 0, s.length() -1 )) return 0;
        int[][] memo = new int[s.length()][s.length()];
        return getMinCuts(s, 0, s.length() - 1, memo);
    }
    
    int getMinCuts(String s, int i, int j, int[][] memo){
        if(i == j || checkPalindrome(s, i, j)) return 0;
        
        if(memo[i][j] != 0) return memo[i][j];
        int ans = s.length();
        for(int k=i; k<=j; k++){
            if(checkPalindrome(s, i, k)){
                ans = Math.min(ans, 1+getMinCuts(s, k+1, j, memo));
            }
        }
        return memo[i][j] = ans;
    }
    
    boolean checkPalindrome(String s, int i, int j){
        while(i < j){
            if(s.charAt(i) != s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }
}
