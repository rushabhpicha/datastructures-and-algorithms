class Solution {
    int[] rows = {1,0,0,-1};
    int[] cols = {0,1,-1,0};
    public int largestIsland(int[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int max = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        int islandId = 2;
        boolean isZero = false;
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j] == 1){
                    getMatrixUpdated(grid, map, islandId, i,j);
                    islandId++;
                }
                if(grid[i][j] == 0) isZero = true;
            }
        }
        if(!isZero) return grid.length * grid[0].length; 
        HashSet<Integer> set = new HashSet<>();
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j] == 0){
                    int curMax = 0;
                    if(checkBoundary(grid, i-1, j) && grid[i-1][j] != 0){
                        set.add(grid[i-1][j]);
                    }
                    if(checkBoundary(grid, i, j-1) && grid[i][j-1] != 0){
                        set.add(grid[i][j-1]);
                    }
                    if(checkBoundary(grid, i+1, j) && grid[i+1][j] != 0){
                        set.add(grid[i+1][j]);
                    }
                    if(checkBoundary(grid, i, j+1) && grid[i][j+1] != 0){
                        set.add(grid[i][j+1]);
                    }
                    for(int k:set){
                        curMax += map.get(k);
                    }
                    curMax += 1;
                    max = Math.max(curMax, max);
                    //System.out.println(set);
                    set.clear();
                }
            }
        }
        return max;
    }
    
    boolean checkBoundary(int[][] grid, int i, int j){
        return i>=0 && j>=0 && i<grid.length && j<grid[0].length;
    }
    
    void getMatrixUpdated(int[][] grid, HashMap<Integer, Integer> map, int islandId, int i, int j){
        
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{i, j});
        int area = 1;
        grid[i][j] = islandId;
        while(!queue.isEmpty()){
            int[] polled = queue.poll();
            for(int k=0; k<rows.length; k++){
                int newRow = rows[k] + polled[0];
                int newCol = cols[k] + polled[1];
                if(newRow >= 0 && newCol >= 0 && newRow < grid.length && newCol < grid[0].length && grid[newRow][newCol] == 1){
                    grid[newRow][newCol] = islandId;
                    area++;
                    queue.add(new int[]{newRow, newCol});
                }
            }
        }
        map.put(islandId, area);
    }
}
