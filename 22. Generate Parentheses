class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        
        getParenthesis(n, 0, 0, res, new StringBuilder());
        return res;
    }
    
    void getParenthesis(int n, int open, int close, List<String> res, StringBuilder sb){
        
        if(open == n && close == n) {
            res.add(sb.toString());
            return;
        }
        
        if(open < n){
            getParenthesis(n, open+1, close, res, sb.append('('));
            sb.setLength(sb.length() - 1);
        }
        if(close < open){
            getParenthesis(n, open, close+1, res, sb.append(')'));
            sb.setLength(sb.length() - 1);
        }    
          
        
    }
}
