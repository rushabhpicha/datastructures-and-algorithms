class Solution {
    int[] rows = {1,0,0,-1};
    int[] cols = {0,1,-1,0};
    int max = 0, curSum = 0;
    public int getMaximumGold(int[][] grid) {
        
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j] != 0){
                    getMaximumThroughBacktracking(i, j, grid[i][j], grid);
                    curSum = 0;
                }
            }
        }
        return max;
    }
    
    void getMaximumThroughBacktracking(int i, int j, int sum, int[][] grid){
        
        curSum += grid[i][j];
        int temp = grid[i][j];
        grid[i][j] = 0;
        max = Math.max(max, curSum);
        for(int k=0; k<rows.length; k++){
            int newRow = rows[k] + i;
            int newCol = cols[k] + j;
            
            if(newRow<0 || newCol<0 || newRow>=grid.length || newCol>=grid[0].length || grid[newRow][newCol] == 0) continue;
            
            getMaximumThroughBacktracking(newRow, newCol, sum, grid);
        }
        grid[i][j] = temp;
        curSum -= temp;
    }
}
