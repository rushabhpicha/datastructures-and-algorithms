class Solution {
    final int[] rows = {1,0,0,-1};
    final int[] cols = {0,1,-1,0};
    
    public boolean exist(char[][] board, String word) {
        if(board == null || board.length == 0 || word == null) return false;
        
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(board[i][j] == word.charAt(0)){
                    if(checkWordUsingBacktracking(board, word, new int[board.length][board[0].length], 1, i, j)) return true;
                }
            }
        }
        return false;
    }
    
    boolean checkWordUsingBacktracking(char[][] board, String word, int[][] visited, int index, int i, int j){
        if(index == word.length()) return true;
        
        char c = board[i][j];
        board[i][j] = '#';
        
        for(int k=0; k<rows.length; k++){
            int newRow = rows[k] + i;
            int newCol = cols[k] + j;
            if(newRow < 0 || newCol < 0 || newRow >= board.length || newCol >= board[0].length || board[newRow][newCol] != word.charAt(index) || board[newRow][newCol] == '#') continue;
            
            if(checkWordUsingBacktracking(board, word, visited, index+1, newRow, newCol)){
                return true;
            }
        }
        
        board[i][j] = c;
        return false;
    }
}
