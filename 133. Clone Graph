/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node == null) return node;
        Queue<Node> queue = new LinkedList<>();
        HashMap<Node, Node> map = new HashMap<>();
        map.put(node, new Node(node.val, new ArrayList<Node>()));
        queue.add(node);
        
        while(!queue.isEmpty()){
            Node cur = queue.poll();
                        
            for(Node tempNode : cur.neighbors){
                if(!map.containsKey(tempNode)){
                    map.put(tempNode, new Node(tempNode.val, new ArrayList<Node>()));
                    queue.add(tempNode);    
                } 
                
                map.get(cur).neighbors.add(map.get(tempNode));
            }
        }
        return map.get(node);
    }
}
