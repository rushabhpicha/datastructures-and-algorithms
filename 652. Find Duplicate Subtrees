/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> ans = new ArrayList<>();
        getString(root, new HashMap<String, Integer>(), ans);
        return ans;
    }
    
    String getString(TreeNode root, HashMap<String, Integer> map, List<TreeNode> ans){
        if(root == null) return "#";
        
        String left = getString(root.left, map, ans);
        String right = getString(root.right, map, ans);
        
        String complete = String.valueOf(root.val) + "," +left + "," +right;
        map.put(complete, map.getOrDefault(complete, 0) + 1);
        if(map.get(complete) == 2) ans.add(root);
        return complete;
    }
}
