class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList<>();
        if(candidates == null || candidates.length == 0) return list;
        
        getCombinations(candidates, target, 0, list, new ArrayList<Integer>(), 0);
        
        return list;
    }
    
    void getCombinations(int[] candidates, int target, int sum, List<List<Integer>> list, List<Integer> temp, int index){
        if(sum > target || index >= candidates.length) return;
        if(target == sum){
            list.add(new ArrayList<>(temp));
            return;
        }
        for(int i=index; i<candidates.length; i++){
            sum += candidates[i];
            temp.add(candidates[i]);
            getCombinations(candidates, target, sum, list, temp, i);
            sum -= candidates[i];
            temp.remove(temp.size() - 1);
        }
    }
}
