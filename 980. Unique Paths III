class Solution {
    int ans = 0;
    final int[] rows = {1,0,0,-1};
    final int[] cols = {0,1,-1,0};
    int numOfWalks = 0;
    public int uniquePathsIII(int[][] grid) {
        int startX = -1, startY = -1;
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j] == 0) numOfWalks++;
                else if(grid[i][j] == 1){
                    startX = i;
                    startY = j;
                }
            }
        }
        //numOfWalks+=1;
        dfs(startX, startY, grid);
        return ans;
    }
    
    void dfs(int i, int j, int[][] grid){
        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j] == -1) return;
        if(grid[i][j] == 2){
            if(numOfWalks == 0) ans++;
            return;
        } 
        
        if(grid[i][j] == 0) numOfWalks -= 1;
        grid[i][j] = -1;
        //System.out.println(numOfWalks);
        for(int k=0; k<rows.length; k++){
            int newRow = rows[k] + i;
            int newCol = cols[k] + j;
            dfs(newRow, newCol, grid);
        }
        grid[i][j] = 0;
        numOfWalks+=1;
    }
}
